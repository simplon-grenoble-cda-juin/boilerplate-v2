BEGIN;

SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET xmloption = content;
SET row_security = off;

SET default_tablespace = '';
SET default_table_access_method = heap;

-- TABLES

CREATE TABLE public.game (
    id integer NOT NULL,
    name text NOT NULL,
    genre text NOT NULL
);

ALTER TABLE public.game
  ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.game_id_seq
    START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1
);

CREATE TABLE public.team (
    id integer NOT NULL,
    name text NOT NULL,
    org_city text,
    founded_year integer,
    CONSTRAINT team_founded_year_check CHECK (founded_year >= 1990)
);

ALTER TABLE public.team
  ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.team_id_seq
    START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1
);

CREATE TABLE public.tournament (
    id integer NOT NULL,
    name text NOT NULL,
    game_id integer NOT NULL,
    start_date date NOT NULL,
    end_date date NOT NULL,
    location text,
    CONSTRAINT tournament_check CHECK (end_date >= start_date)
);

ALTER TABLE public.tournament
  ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.tournament_id_seq
    START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1
);

CREATE TABLE public.player (
    id integer NOT NULL,
    nickname text NOT NULL,
    full_name text,
    birthdate date,
    country text,
    team_id integer
);

ALTER TABLE public.player
  ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.player_id_seq
    START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1
);

CREATE TABLE public.team_tournament (
    id integer NOT NULL,
    team_id integer NOT NULL,
    tournament_id integer NOT NULL,
    seed integer
);

ALTER TABLE public.team_tournament
  ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.team_tournament_id_seq
    START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1
);

CREATE TABLE public.match (
    id integer NOT NULL,
    tournament_id integer NOT NULL,
    game_id integer NOT NULL,
    match_date timestamp without time zone NOT NULL,
    team1_id integer NOT NULL,
    team2_id integer NOT NULL,
    team1_score integer DEFAULT 0 NOT NULL,
    team2_score integer DEFAULT 0 NOT NULL,
    best_of integer DEFAULT 3 NOT NULL,
    CONSTRAINT match_best_of_check CHECK (best_of = ANY (ARRAY[1,3,5,7])),
    CONSTRAINT match_check CHECK (team1_id <> team2_id),
    CONSTRAINT match_team1_score_check CHECK (team1_score >= 0),
    CONSTRAINT match_team2_score_check CHECK (team2_score >= 0)
);

ALTER TABLE public.match
  ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.match_id_seq
    START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1
);

-- TABLE Dâ€™AUTHENTIFICATION

CREATE TABLE public."user" (
    id integer NOT NULL,
    email text NOT NULL,
    password text NOT NULL,
    created_at timestamp without time zone NOT NULL
);

ALTER TABLE public."user"
  ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.user_id_seq
    START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1
);

CREATE TABLE public.token (
    id integer NOT NULL,
    user_id integer NOT NULL,
    token text NOT NULL,
    created_at timestamp without time zone NOT NULL DEFAULT now()
);

ALTER TABLE public.token
  ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.token_id_seq
    START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1
);


-- CONTRAINTES PRIMAIRES ET UNIQUES

ALTER TABLE ONLY public.game
  ADD CONSTRAINT game_pkey PRIMARY KEY (id);

ALTER TABLE ONLY public.team
  ADD CONSTRAINT team_pkey PRIMARY KEY (id);

ALTER TABLE ONLY public.team
  ADD CONSTRAINT team_name_key UNIQUE (name);

ALTER TABLE ONLY public.tournament
  ADD CONSTRAINT tournament_pkey PRIMARY KEY (id);

ALTER TABLE ONLY public.player
  ADD CONSTRAINT player_pkey PRIMARY KEY (id);

ALTER TABLE ONLY public.player
  ADD CONSTRAINT player_nickname_key UNIQUE (nickname);

ALTER TABLE ONLY public.team_tournament
  ADD CONSTRAINT team_tournament_pkey PRIMARY KEY (id);

ALTER TABLE ONLY public.team_tournament
  ADD CONSTRAINT team_tournament_team_id_tournament_id_key UNIQUE (team_id, tournament_id);

ALTER TABLE ONLY public.match
  ADD CONSTRAINT match_pkey PRIMARY KEY (id);

ALTER TABLE ONLY public."user"
  ADD CONSTRAINT user_pkey PRIMARY KEY (id);

ALTER TABLE ONLY public."user"
  ADD CONSTRAINT user_email_key UNIQUE (email);

ALTER TABLE ONLY public.token
  ADD CONSTRAINT token_pkey PRIMARY KEY (id);

-- CLES ETRANGERES

ALTER TABLE ONLY public.tournament
  ADD CONSTRAINT tournament_game_id_fkey
  FOREIGN KEY (game_id) REFERENCES public.game(id)
  ON UPDATE CASCADE ON DELETE RESTRICT;

ALTER TABLE ONLY public.player
  ADD CONSTRAINT player_team_id_fkey
  FOREIGN KEY (team_id) REFERENCES public.team(id)
  ON UPDATE CASCADE ON DELETE SET NULL;

ALTER TABLE ONLY public.team_tournament
  ADD CONSTRAINT team_tournament_team_id_fkey
  FOREIGN KEY (team_id) REFERENCES public.team(id)
  ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY public.team_tournament
  ADD CONSTRAINT team_tournament_tournament_id_fkey
  FOREIGN KEY (tournament_id) REFERENCES public.tournament(id)
  ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY public.match
  ADD CONSTRAINT match_game_id_fkey
  FOREIGN KEY (game_id) REFERENCES public.game(id)
  ON UPDATE CASCADE ON DELETE RESTRICT;

ALTER TABLE ONLY public.match
  ADD CONSTRAINT match_tournament_id_fkey
  FOREIGN KEY (tournament_id) REFERENCES public.tournament(id)
  ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY public.match
  ADD CONSTRAINT match_team1_id_fkey
  FOREIGN KEY (team1_id) REFERENCES public.team(id)
  ON UPDATE CASCADE ON DELETE RESTRICT;

ALTER TABLE ONLY public.match
  ADD CONSTRAINT match_team2_id_fkey
  FOREIGN KEY (team2_id) REFERENCES public.team(id)
  ON UPDATE CASCADE ON DELETE RESTRICT;

ALTER TABLE ONLY public.token
  ADD CONSTRAINT token_user_id_fkey
  FOREIGN KEY (user_id) REFERENCES public."user"(id)
  ON UPDATE CASCADE ON DELETE CASCADE;

COMMIT;
